services:
  postgresql-user:
    image: postgres:15.3
    container_name: postgresql-user
    ports:
      - "5432:5432"
    # env_file:
    #   - ./02-users/.env
    environment:
      POSTGRES_USER: admin       
      POSTGRES_PASSWORD: 12345   
      POSTGRES_DB: user_db 
    volumes:
      - vol-spotify-ms-postgresql:/var/lib/postgresql/data
    networks:
      - net-spotify-ms
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d user_db"]
      interval: 5s
      timeout: 3s
      retries: 5

  postgresql-playlist:
    image: postgres:15.3
    container_name: postgresql-playlist
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: admin       
      POSTGRES_PASSWORD: 12345   
      POSTGRES_DB: playlist_db
    volumes:
      - vol-playlist-db:/var/lib/postgresql/data
    networks:
      - net-spotify-ms
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d playlist_db"]
      interval: 5s
      timeout: 3s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    hostname: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    healthcheck:
      test: nc -z localhost 2181 || exit 1
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - net-spotify-ms

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 10s
      timeout: 10s
      retries: 5
      start_interval: 10s
    ports:
      - 9092:9092
    networks:
      - net-spotify-ms
  gateway-service:
    build:
      context: ./00-gateway  
      dockerfile: Dockerfile  
    container_name: gateway-service
    restart: unless-stopped
    depends_on:
      postgresql-user:
        condition: service_healthy 
      postgresql-playlist:
        condition: service_healthy  
    environment:
      PORT: 3000  
      TOKEN_SECRET: c270f3c2-ad37-4148-a7cb-12a21f886cdb  
      SERVICE_AUTH_LOGIN: http://auth-service:3010/auth/login  
      SERVICE_USER: http://users-service:3020/users  
      SERVICE_PLAYLIST: http://playlists-service:3030/playlists  
      SERVICE_SONG: http://songs-service:3040/songs  
    ports:
      - "3000:3000"  
    networks:
      - net-spotify-ms
  auth-service:
    build:
      context: ./01-auth  
      dockerfile: Dockerfile  
    container_name: auth-service
    restart: unless-stopped
    depends_on:
      postgresql-user:
        condition: service_healthy  
    environment:
      PORT: 3010 
      SERVICE_USER_BY_EMAIL: http://users-service:3020/users/user-by-email 
      TOKEN_SECRET: c270f3c2-ad37-4148-a7cb-12a21f886cdb
    ports:
      - "3010:3010"  
    networks:
      - net-spotify-ms
  users-service:
    build:
      context: ./02-users  
      dockerfile: Dockerfile  
    container_name: users-service
    restart: unless-stopped
    depends_on:
      postgresql-user:
        condition: service_healthy  
    environment:
      DB_HOST: postgresql-user  
      DB_PORT: 5432
      DB_NAME: user_db
      DB_USERNAME: admin
      DB_PASSWORD: 12345
      PORT: 3020
    ports:
      - "3020:3020"  
    networks:
      - net-spotify-ms

  playlists-service:
    build:
      context: ./03-playlists  
      dockerfile: Dockerfile  
    container_name: playlists-service
    restart: unless-stopped
    depends_on:
      postgresql-playlist:
        condition: service_healthy  
    environment:
      DB_HOST: postgresql-playlist
      DB_PORT: 5432
      DB_NAME: playlist_db
      DB_USERNAME: admin
      DB_PASSWORD: 12345
      PORT: 3030
      KAFKA_BROKER: kafka:29092
    ports:
      - "3030:3030"  
    networks:
      - net-spotify-ms

  songs-service:
    build:
      context: ./04-songs  
      dockerfile: Dockerfile  
    container_name: songs-service
    restart: unless-stopped
    depends_on:
      postgresql-playlist:
        condition: service_healthy  
    environment:
      PORT: 3040
      KAFKA_BROKER: kafka:29092
    ports:
      - "3040:3040"  
    networks:
      - net-spotify-ms
      

volumes:
  vol-spotify-ms-postgresql:
  vol-playlist-db:

networks:
  net-spotify-ms:
    driver: bridge